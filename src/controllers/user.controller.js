import {
  ApiError,
  ApiResponse,
  asyncHandler,
  emailVerificationMailgenContext,
  moveImage,
  sendEmail,
} from "../utils/index.js";
import crypto from "crypto";

import { EcomProfileModel, UserModel } from "../models/index.js";
import { getConfig } from "../config/index.js";
import { CustomerFilters } from "../lib/contants.js";
import { delay } from "../utils/helpers.js";

const cookieOptions = {
  httpOnly: true,
  secure: getConfig.get("nodeENV") === "production",
};

export const updateUserStatus = asyncHandler(async (req, res, next) => {
  const user = await UserModel.findByIdAndUpdate(
    req.params.id,
    { userStatus: req.body.status },
    {
      new: true,
      runValidators: true,
    }
  );
  res.status(200).json(new ApiResponse(200, user));
});

export const updateUserDetails = asyncHandler(async (req, res, next) => {
  const username = req.body.username;

  const { avatar } = await moveImage(req, "user/images", username);

  req.body.avatar = avatar ? avatar[0] : {};

  const profile = {
    avatar: req.body.avatar,
    firstName: req.body.firstName,
    lastName: req.body.lastName,
    phoneNumber: req.body.phone,
  };

  const newProfile = await EcomProfileModel.findByIdAndUpdate(
    { _id: req.user.profile._id },
    profile,
    {
      new: true,
      runValidators: true,
    }
  );
  res
    .status(200)
    .json(new ApiResponse(200, newProfile, "User updated successfully!."));
});

export const registerUser = asyncHandler(async (req, res, next) => {
  const user = await UserModel.create(req.body);

  const { unHashedToken, hashedToken, tokenExpiry } =
    user.generateTemporaryToken();

  const { accessToken, refreshToken } = await generateAccessAndRefreshToken(
    user
  );

  user.emailVerificationToken = hashedToken;
  user.emailVerificationExpires = tokenExpiry;

  await user.save({ validateBeforeSave: false });

  await sendEmail({
    email: user?.email,
    subject: "Please verify your email",
    mailgenContext: emailVerificationMailgenContext(
      user.username,
      `${req.protocol}://${req.get(
        "host"
      )}/api/v1/user/verify-email/${unHashedToken}`
    ),
  });

  const createdUser = await UserModel.findById(user._id)
    .select(
      "-password -refreshToken -emailVerificationToken -emailVerificationExpiry"
    )
    .populate("profile");

  if (!createdUser) {
    throw new ApiError(500, "Something went wrong while registering the user");
  }

  res
    .status(201)
    .cookie("accessToken", accessToken, cookieOptions)
    .cookie("refreshToken", refreshToken, cookieOptions)
    .json(
      new ApiResponse(
        201,
        { user: createdUser },
        "Users registered successfully and verification email has been sent on your email."
      )
    );
});

export const loginUser = asyncHandler(async (req, res, next) => {
  const existingUser = await UserModel.loginUser(req.body);

  const { accessToken, refreshToken } = await generateAccessAndRefreshToken(
    existingUser
  );
  const {
    profile,
    refreshToken: userRefreshToken,
    emailVerificationToken,
    emailVerificationExpires,
    ...user
  } = existingUser._doc;

  res
    .status(200)
    .cookie("accessToken", accessToken, cookieOptions)
    .cookie("refreshToken", refreshToken, cookieOptions)
    .json(
      new ApiResponse(200, { user, profile }, "User logged in successfully")
    );
});

export const getAUser = asyncHandler(async (req, res, next) => {
  res
    .status(200)
    .json(new ApiResponse(200, { user: req.user, profile: req.profile }));
});

export const verifyEmail = asyncHandler(async (req, res, next) => {
  const { verificationToken } = req.params;
  if (!verificationToken)
    throw new ApiError(
      400,
      "Email Verification Token Required to verify your account"
    );

  // generate a hash from the token that we are receiving

  let hashedToken = crypto
    .createHash("sha256")
    .update(verificationToken)
    .digest("hex");

  // While registering the user, same time when we are sending the verification mail
  // we have saved a hashed value of the original email verification token in the db
  // We will try to find user with the hashed token generated by received token
  // If we find the user another check is if token expiry of that token is greater than current time if not that means it is expired

  const user = await UserModel.findOne({
    emailVerificationToken: hashedToken,
    emailVerificationExpires: { $gt: Date.now() },
  });
  if (!user) throw new ApiError(489, "Token is invalid or expired");

  user.isEmailVerified = true;
  user.emailVerificationToken = undefined;
  user.emailVerificationExpires = undefined;

  await user.save({ validateBeforeSave: false });
  return res
    .status(200)
    .json(new ApiResponse(200, { isEmailVerified: true }, "Email is verified"));
});

// This controller is called when user is logged in and he has snackbar that your email is not verified
// In case he did not get the email or the email verification token is expired
// he will be able to resend the token while he is logged in
export const resendEmailVerification = asyncHandler(async (req, res, next) => {
  const user = await UserModel.findById(req.user?._id);

  if (!user) {
    throw new ApiError(404, "User does not exists", []);
  }

  // if email is already verified throw an error
  if (user.isEmailVerified) {
    throw new ApiError(409, "Email is already verified!");
  }
  const { unHashedToken, hashedToken, tokenExpiry } =
    user.generateTemporaryToken(); // generate email verification creds

  user.emailVerificationToken = hashedToken;
  user.emailVerificationExpires = tokenExpiry;

  await user.save({ validateBeforeSave: false });

  await sendEmail({
    email: user?.email,
    subject: "Please verify your email",
    mailgenContext: emailVerificationMailgenContext(
      user.username,
      `${req.protocol}://${req.get(
        "host"
      )}/api/v1/user/verify-email/${unHashedToken}`
    ),
  });

  return res
    .status(200)
    .json(new ApiResponse(200, {}, "Mail has been sent to your mail Address!"));
});

const generateAccessAndRefreshToken = async (user) => {
  try {
    const accessToken = await user.generateAccessToken();
    const refreshToken = await user.generateRefreshToken();
    user.refreshToken = refreshToken;
    await user.save({ validateBeforeSave: false });
    return { accessToken, refreshToken };
  } catch (error) {
    throw new ApiError(
      500,
      "Something went wrong while generating the access token"
    );
  }
};

export const getAllUsers = asyncHandler(async (req, res, next) => {
  let { keywords, page, limit, viewId } = req.query;

  const filter = CustomerFilters.find((filter) => filter.viewId === viewId);

  page = parseInt(page) || 1;
  limit = parseInt(limit) || 8;
  const commonPipeline = [
    { $sort: { timestamp: -1 } },
    {
      $facet: {
        customers: [{ $skip: (page - 1) * limit }, { $limit: limit }],
        facets: [
          { $count: "totalCount" },

          // { $addFields: { collection: collection } },
          {
            $addFields: {
              currentPage: page,
              totalPages: { $ceil: { $divide: ["$totalCount", limit] } },
              startIndex: { $add: [(page - 1) * limit, 1] }, // Calculate startIndex of current products
              nextPage: { $add: [page, 1] },
              limit: limit,
            },
          },
        ],
      },
    },
    {
      $unwind: "$facets",
    },
  ];

  const queries = [];
  keywords &&
    queries.push({
      $match: {
        $or: [
          { name: { $regex: keywords, $options: "i" } },
          { email: { $regex: keywords, $options: "i" } },
        ],
      },
    });
  filter?.query && queries.push({ $match: filter?.query });

  const pipeline = [...queries.filter(Boolean), ...commonPipeline];

  const users = await UserModel.aggregate(pipeline);

  // const users = await UserModel.find().select(
  //   "-password -refreshToken -emailVerificationExpires -emailVerificationToken -forgotPasswordToken -forgotPasswordExpires"
  // );
  res.status(200).json(new ApiResponse(200, users[0]));
});

export const logoutUser = asyncHandler(async (req, res, next) => {
  res.clearCookie("accessToken");
  res.clearCookie("refreshToken");
  res
    .status(200)
    .json(new ApiResponse(200, {}, "User logged out successfully"));
});

export const updateAccount = asyncHandler(async (req, res, next) => {
  const existingUser = await UserModel.findByIdAndUpdate(req.user._id, {
    email: req.body.email,
    username: req.body.username,
  })
    .select(
      "-password -refreshToken -emailVerificationExpires -emailVerificationToken -forgotPasswordToken -forgotPasswordExpires"
    )
    .populate("profile");

  const { profile, ...user } = existingUser._doc;

  res
    .status(200)
    .json(
      new ApiResponse(
        200,
        { user, profile },
        "User Account Updated Successfully"
      )
    );
});
export const updatePassword = asyncHandler(async (req, res, next) => {
  const { currentPassword, newPassword } = req.body;
  const user = await UserModel.findById(req.user._id);
  const isMatch = await user.comparePassword(currentPassword);
  if (!isMatch)
    throw new ApiError(400, "currentPassword: Invalid Current Password");

  user.password = newPassword;
  await user.save();
  res
    .status(200)
    .json(new ApiResponse(200, {}, "User Password Updated Successfully"));
});

export const deleteAccount = asyncHandler(async (req, res, next) => {
  await UserModel.loginUser(req.body);
  await UserModel.findByIdAndDelete(req.user._id);
  res.clearCookie("accessToken");
  res.clearCookie("refreshToken");
  res
    .status(200)
    .json(new ApiResponse(200, {}, "User Account Deleted Successfully"));
});
